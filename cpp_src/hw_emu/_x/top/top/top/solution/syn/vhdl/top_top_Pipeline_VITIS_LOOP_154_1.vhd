-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_top_Pipeline_VITIS_LOOP_154_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xbarpipe_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    xbarpipe_empty_n : IN STD_LOGIC;
    xbarpipe_read : OUT STD_LOGIC;
    xbarIDRpipe_dout : IN STD_LOGIC_VECTOR (51 downto 0);
    xbarIDRpipe_empty_n : IN STD_LOGIC;
    xbarIDRpipe_read : OUT STD_LOGIC;
    IDRpipe1_din : OUT STD_LOGIC_VECTOR (51 downto 0);
    IDRpipe1_full_n : IN STD_LOGIC;
    IDRpipe1_write : OUT STD_LOGIC;
    IDRpipe2_din : OUT STD_LOGIC_VECTOR (51 downto 0);
    IDRpipe2_full_n : IN STD_LOGIC;
    IDRpipe2_write : OUT STD_LOGIC;
    IDRpipe3_din : OUT STD_LOGIC_VECTOR (51 downto 0);
    IDRpipe3_full_n : IN STD_LOGIC;
    IDRpipe3_write : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of top_top_Pipeline_VITIS_LOOP_154_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal tmp_3_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal and_ln180_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal xbarIDRpipe_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_nbreadreq_fu_58_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal IDRpipe1_blk_n : STD_LOGIC;
    signal ind_V_reg_142 : STD_LOGIC_VECTOR (2 downto 0);
    signal xbarpipe_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal IDRpipe2_blk_n : STD_LOGIC;
    signal IDRpipe3_blk_n : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op37_write_state3 : BOOLEAN;
    signal ap_predicate_op39_write_state3 : BOOLEAN;
    signal ap_predicate_op41_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal xbarIDRpipe_read_reg_135 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal and_ln180_reg_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal cnt_fu_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_8_fu_102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln180_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln180_reg_146 <= and_ln180_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cnt_fu_54 <= cnt_8_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_3_reg_131 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ind_V_reg_142 <= xbarpipe_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_reg_131 <= grp_nbreadreq_fu_58_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                xbarIDRpipe_read_reg_135 <= xbarIDRpipe_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to1, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    IDRpipe1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_131, IDRpipe1_full_n, ap_block_pp0_stage0, ind_V_reg_142)
    begin
        if (((ind_V_reg_142 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_131 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IDRpipe1_blk_n <= IDRpipe1_full_n;
        else 
            IDRpipe1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IDRpipe1_din <= xbarIDRpipe_read_reg_135;

    IDRpipe1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op41_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op41_write_state3 = ap_const_boolean_1))) then 
            IDRpipe1_write <= ap_const_logic_1;
        else 
            IDRpipe1_write <= ap_const_logic_0;
        end if; 
    end process;


    IDRpipe2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_131, IDRpipe2_full_n, ap_block_pp0_stage0, ind_V_reg_142)
    begin
        if (((ind_V_reg_142 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_131 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IDRpipe2_blk_n <= IDRpipe2_full_n;
        else 
            IDRpipe2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IDRpipe2_din <= xbarIDRpipe_read_reg_135;

    IDRpipe2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op39_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op39_write_state3 = ap_const_boolean_1))) then 
            IDRpipe2_write <= ap_const_logic_1;
        else 
            IDRpipe2_write <= ap_const_logic_0;
        end if; 
    end process;


    IDRpipe3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_131, IDRpipe3_full_n, ap_block_pp0_stage0, ind_V_reg_142)
    begin
        if (((ind_V_reg_142 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_131 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IDRpipe3_blk_n <= IDRpipe3_full_n;
        else 
            IDRpipe3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IDRpipe3_din <= xbarIDRpipe_read_reg_135;

    IDRpipe3_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op37_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op37_write_state3 = ap_const_boolean_1))) then 
            IDRpipe3_write <= ap_const_logic_1;
        else 
            IDRpipe3_write <= ap_const_logic_0;
        end if; 
    end process;

    and_ln180_fu_119_p2 <= (icmp_ln180_fu_113_p2 and grp_nbreadreq_fu_58_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, xbarIDRpipe_empty_n, IDRpipe1_full_n, IDRpipe2_full_n, IDRpipe3_full_n, grp_nbreadreq_fu_58_p3, ap_predicate_op37_write_state3, ap_predicate_op39_write_state3, ap_predicate_op41_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = IDRpipe1_full_n) and (ap_predicate_op41_write_state3 = ap_const_boolean_1)) or ((ap_const_logic_0 = IDRpipe2_full_n) and (ap_predicate_op39_write_state3 = ap_const_boolean_1)) or ((ap_const_logic_0 = IDRpipe3_full_n) and (ap_predicate_op37_write_state3 = ap_const_boolean_1)))) or ((grp_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (xbarIDRpipe_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, xbarIDRpipe_empty_n, IDRpipe1_full_n, IDRpipe2_full_n, IDRpipe3_full_n, grp_nbreadreq_fu_58_p3, ap_predicate_op37_write_state3, ap_predicate_op39_write_state3, ap_predicate_op41_write_state3)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = IDRpipe1_full_n) and (ap_predicate_op41_write_state3 = ap_const_boolean_1)) or ((ap_const_logic_0 = IDRpipe2_full_n) and (ap_predicate_op39_write_state3 = ap_const_boolean_1)) or ((ap_const_logic_0 = IDRpipe3_full_n) and (ap_predicate_op37_write_state3 = ap_const_boolean_1)))) or ((grp_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (xbarIDRpipe_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, xbarIDRpipe_empty_n, IDRpipe1_full_n, IDRpipe2_full_n, IDRpipe3_full_n, grp_nbreadreq_fu_58_p3, ap_predicate_op37_write_state3, ap_predicate_op39_write_state3, ap_predicate_op41_write_state3)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = IDRpipe1_full_n) and (ap_predicate_op41_write_state3 = ap_const_boolean_1)) or ((ap_const_logic_0 = IDRpipe2_full_n) and (ap_predicate_op39_write_state3 = ap_const_boolean_1)) or ((ap_const_logic_0 = IDRpipe3_full_n) and (ap_predicate_op37_write_state3 = ap_const_boolean_1)))) or ((grp_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (xbarIDRpipe_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, xbarpipe_empty_n, tmp_3_reg_131)
    begin
                ap_block_pp0_stage1_11001 <= ((tmp_3_reg_131 = ap_const_lv1_1) and (xbarpipe_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, xbarpipe_empty_n, tmp_3_reg_131)
    begin
                ap_block_pp0_stage1_subdone <= ((tmp_3_reg_131 = ap_const_lv1_1) and (xbarpipe_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(xbarIDRpipe_empty_n, grp_nbreadreq_fu_58_p3)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((grp_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (xbarIDRpipe_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(xbarpipe_empty_n, tmp_3_reg_131)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((tmp_3_reg_131 = ap_const_lv1_1) and (xbarpipe_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(IDRpipe1_full_n, IDRpipe2_full_n, IDRpipe3_full_n, ap_predicate_op37_write_state3, ap_predicate_op39_write_state3, ap_predicate_op41_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((ap_const_logic_0 = IDRpipe1_full_n) and (ap_predicate_op41_write_state3 = ap_const_boolean_1)) or ((ap_const_logic_0 = IDRpipe2_full_n) and (ap_predicate_op39_write_state3 = ap_const_boolean_1)) or ((ap_const_logic_0 = IDRpipe3_full_n) and (ap_predicate_op37_write_state3 = ap_const_boolean_1)));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, and_ln180_fu_119_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_lv1_1 = and_ln180_fu_119_p2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln180_reg_146, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_lv1_1 = and_ln180_reg_146) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (xbarpipe_blk_n and xbarIDRpipe_blk_n and IDRpipe3_blk_n and IDRpipe2_blk_n and IDRpipe1_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_predicate_op37_write_state3_assign_proc : process(tmp_3_reg_131, ind_V_reg_142)
    begin
                ap_predicate_op37_write_state3 <= ((ind_V_reg_142 = ap_const_lv3_3) and (tmp_3_reg_131 = ap_const_lv1_1));
    end process;


    ap_predicate_op39_write_state3_assign_proc : process(tmp_3_reg_131, ind_V_reg_142)
    begin
                ap_predicate_op39_write_state3 <= ((ind_V_reg_142 = ap_const_lv3_2) and (tmp_3_reg_131 = ap_const_lv1_1));
    end process;


    ap_predicate_op41_write_state3_assign_proc : process(tmp_3_reg_131, ind_V_reg_142)
    begin
                ap_predicate_op41_write_state3 <= ((ind_V_reg_142 = ap_const_lv3_1) and (tmp_3_reg_131 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    cnt_8_fu_102_p2 <= std_logic_vector(unsigned(cnt_fu_54) + unsigned(ap_const_lv32_1));
    grp_nbreadreq_fu_58_p3 <= (0=>(xbarIDRpipe_empty_n), others=>'-');
    icmp_ln180_fu_113_p2 <= "1" when (cnt_fu_54 = ap_const_lv32_10) else "0";

    xbarIDRpipe_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, xbarIDRpipe_empty_n, ap_block_pp0_stage0, grp_nbreadreq_fu_58_p3)
    begin
        if (((grp_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xbarIDRpipe_blk_n <= xbarIDRpipe_empty_n;
        else 
            xbarIDRpipe_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xbarIDRpipe_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_nbreadreq_fu_58_p3, ap_block_pp0_stage0_11001)
    begin
        if (((grp_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xbarIDRpipe_read <= ap_const_logic_1;
        else 
            xbarIDRpipe_read <= ap_const_logic_0;
        end if; 
    end process;


    xbarpipe_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, xbarpipe_empty_n, tmp_3_reg_131, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (tmp_3_reg_131 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            xbarpipe_blk_n <= xbarpipe_empty_n;
        else 
            xbarpipe_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xbarpipe_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_3_reg_131, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_3_reg_131 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            xbarpipe_read <= ap_const_logic_1;
        else 
            xbarpipe_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
