// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_subT1_lev_stage_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        childindexpipe_0_dout,
        childindexpipe_0_empty_n,
        childindexpipe_0_read,
        childindexpipe_1_din,
        childindexpipe_1_full_n,
        childindexpipe_1_write,
        lev_retpipe_0_dout,
        lev_retpipe_0_empty_n,
        lev_retpipe_0_read,
        lev_retpipe_1_din,
        lev_retpipe_1_full_n,
        lev_retpipe_1_write,
        IDRpipes_0_dout,
        IDRpipes_0_empty_n,
        IDRpipes_0_read,
        IDRpipes_1_din,
        IDRpipes_1_full_n,
        IDRpipes_1_write,
        memoiz_array_par_ind_address0,
        memoiz_array_par_ind_ce0,
        memoiz_array_par_ind_we0,
        memoiz_array_par_ind_d0,
        memoiz_array_child_ind_address0,
        memoiz_array_child_ind_ce0,
        memoiz_array_child_ind_we0,
        memoiz_array_child_ind_d0,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] childindexpipe_0_dout;
input   childindexpipe_0_empty_n;
output   childindexpipe_0_read;
output  [63:0] childindexpipe_1_din;
input   childindexpipe_1_full_n;
output   childindexpipe_1_write;
input  [0:0] lev_retpipe_0_dout;
input   lev_retpipe_0_empty_n;
output   lev_retpipe_0_read;
output  [0:0] lev_retpipe_1_din;
input   lev_retpipe_1_full_n;
output   lev_retpipe_1_write;
input  [63:0] IDRpipes_0_dout;
input   IDRpipes_0_empty_n;
output   IDRpipes_0_read;
output  [63:0] IDRpipes_1_din;
input   IDRpipes_1_full_n;
output   IDRpipes_1_write;
output  [4:0] memoiz_array_par_ind_address0;
output   memoiz_array_par_ind_ce0;
output   memoiz_array_par_ind_we0;
output  [31:0] memoiz_array_par_ind_d0;
output  [4:0] memoiz_array_child_ind_address0;
output   memoiz_array_child_ind_ce0;
output   memoiz_array_child_ind_we0;
output  [0:0] memoiz_array_child_ind_d0;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg childindexpipe_0_read;
reg childindexpipe_1_write;
reg lev_retpipe_0_read;
reg lev_retpipe_1_write;
reg IDRpipes_0_read;
reg IDRpipes_1_write;
reg memoiz_array_par_ind_ce0;
reg memoiz_array_par_ind_we0;
reg memoiz_array_child_ind_ce0;
reg memoiz_array_child_ind_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    childindexpipe_0_blk_n;
reg    childindexpipe_1_blk_n;
wire    ap_CS_fsm_state2;
reg    lev_retpipe_0_blk_n;
reg    lev_retpipe_1_blk_n;
reg    IDRpipes_0_blk_n;
reg    IDRpipes_1_blk_n;
wire   [31:0] pipeobj_depth_fu_156_p1;
reg   [31:0] pipeobj_depth_reg_223;
wire   [0:0] ret_signal_V_read_fu_76_p2;
reg   [0:0] ret_signal_V_reg_228;
reg   [63:0] IDRpipes_0_read_reg_232;
wire   [31:0] newind_1_fu_195_p2;
wire   [31:0] newind_fu_209_p2;
reg   [31:0] newind_reg_242;
reg   [31:0] ap_phi_mux_newind_3_phi_fu_140_p4;
reg   [31:0] newind_3_reg_137;
reg    ap_block_state1;
reg    ap_block_state2;
wire   [63:0] zext_ln390_fu_175_p1;
wire   [31:0] pipeobj_ind_fu_160_p4;
wire   [4:0] IDR_wind_fu_171_p1;
wire   [29:0] grp_fu_146_p4;
wire   [31:0] and_ln1_fu_181_p3;
wire   [31:0] sub_ln413_fu_189_p2;
wire   [31:0] and_ln_fu_201_p3;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_int_blocking_cur_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((lev_retpipe_1_full_n == 1'b0) | (1'b0 == IDRpipes_1_full_n) | (childindexpipe_1_full_n == 1'b0)) & (ret_signal_V_reg_228 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        newind_3_reg_137 <= newind_reg_242;
    end else if ((~((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0)) & (ret_signal_V_read_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        newind_3_reg_137 <= newind_1_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        IDRpipes_0_read_reg_232 <= IDRpipes_0_dout;
        pipeobj_depth_reg_223 <= pipeobj_depth_fu_156_p1;
        ret_signal_V_reg_228 <= lev_retpipe_0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ret_signal_V_read_fu_76_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        newind_reg_242 <= newind_fu_209_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        IDRpipes_0_blk_n = IDRpipes_0_empty_n;
    end else begin
        IDRpipes_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        IDRpipes_0_read = 1'b1;
    end else begin
        IDRpipes_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IDRpipes_1_blk_n = IDRpipes_1_full_n;
    end else begin
        IDRpipes_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((lev_retpipe_1_full_n == 1'b0) | (1'b0 == IDRpipes_1_full_n) | (childindexpipe_1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        IDRpipes_1_write = 1'b1;
    end else begin
        IDRpipes_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((lev_retpipe_1_full_n == 1'b0) | (1'b0 == IDRpipes_1_full_n) | (childindexpipe_1_full_n == 1'b0))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((lev_retpipe_1_full_n == 1'b0) | (1'b0 == IDRpipes_1_full_n) | (childindexpipe_1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ret_signal_V_reg_228 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_newind_3_phi_fu_140_p4 = newind_reg_242;
    end else begin
        ap_phi_mux_newind_3_phi_fu_140_p4 = newind_3_reg_137;
    end
end

always @ (*) begin
    if ((~((lev_retpipe_1_full_n == 1'b0) | (1'b0 == IDRpipes_1_full_n) | (childindexpipe_1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        childindexpipe_0_blk_n = childindexpipe_0_empty_n;
    end else begin
        childindexpipe_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        childindexpipe_0_read = 1'b1;
    end else begin
        childindexpipe_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        childindexpipe_1_blk_n = childindexpipe_1_full_n;
    end else begin
        childindexpipe_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((lev_retpipe_1_full_n == 1'b0) | (1'b0 == IDRpipes_1_full_n) | (childindexpipe_1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        childindexpipe_1_write = 1'b1;
    end else begin
        childindexpipe_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lev_retpipe_0_blk_n = lev_retpipe_0_empty_n;
    end else begin
        lev_retpipe_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lev_retpipe_0_read = 1'b1;
    end else begin
        lev_retpipe_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lev_retpipe_1_blk_n = lev_retpipe_1_full_n;
    end else begin
        lev_retpipe_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((lev_retpipe_1_full_n == 1'b0) | (1'b0 == IDRpipes_1_full_n) | (childindexpipe_1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        lev_retpipe_1_write = 1'b1;
    end else begin
        lev_retpipe_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        memoiz_array_child_ind_ce0 = 1'b1;
    end else begin
        memoiz_array_child_ind_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0)) & (ret_signal_V_read_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        memoiz_array_child_ind_we0 = 1'b1;
    end else begin
        memoiz_array_child_ind_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        memoiz_array_par_ind_ce0 = 1'b1;
    end else begin
        memoiz_array_par_ind_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0)) & (ret_signal_V_read_fu_76_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        memoiz_array_par_ind_we0 = 1'b1;
    end else begin
        memoiz_array_par_ind_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((lev_retpipe_1_full_n == 1'b0) | (1'b0 == IDRpipes_1_full_n) | (childindexpipe_1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IDR_wind_fu_171_p1 = IDRpipes_0_dout[4:0];

assign IDRpipes_1_din = IDRpipes_0_read_reg_232;

assign and_ln1_fu_181_p3 = {{grp_fu_146_p4}, {2'd0}};

assign and_ln_fu_201_p3 = {{grp_fu_146_p4}, {2'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (lev_retpipe_0_empty_n == 1'b0) | (1'b0 == IDRpipes_0_empty_n) | (childindexpipe_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((lev_retpipe_1_full_n == 1'b0) | (1'b0 == IDRpipes_1_full_n) | (childindexpipe_1_full_n == 1'b0));
end

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (lev_retpipe_1_blk_n & lev_retpipe_0_blk_n & childindexpipe_1_blk_n & childindexpipe_0_blk_n & IDRpipes_1_blk_n & IDRpipes_0_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign childindexpipe_1_din = {{ap_phi_mux_newind_3_phi_fu_140_p4}, {pipeobj_depth_reg_223}};

assign grp_fu_146_p4 = {{childindexpipe_0_dout[61:32]}};

assign lev_retpipe_1_din = 1'd1;

assign memoiz_array_child_ind_address0 = zext_ln390_fu_175_p1;

assign memoiz_array_child_ind_d0 = 1'd0;

assign memoiz_array_par_ind_address0 = zext_ln390_fu_175_p1;

assign memoiz_array_par_ind_d0 = {{childindexpipe_0_dout[63:32]}};

assign newind_1_fu_195_p2 = (sub_ln413_fu_189_p2 + 32'd1);

assign newind_fu_209_p2 = (and_ln_fu_201_p3 - pipeobj_ind_fu_160_p4);

assign pipeobj_depth_fu_156_p1 = childindexpipe_0_dout[31:0];

assign pipeobj_ind_fu_160_p4 = {{childindexpipe_0_dout[63:32]}};

assign ret_signal_V_read_fu_76_p2 = lev_retpipe_0_dout;

assign sub_ln413_fu_189_p2 = (and_ln1_fu_181_p3 - pipeobj_ind_fu_160_p4);

assign zext_ln390_fu_175_p1 = IDR_wind_fu_171_p1;

endmodule //top_subT1_lev_stage_4
