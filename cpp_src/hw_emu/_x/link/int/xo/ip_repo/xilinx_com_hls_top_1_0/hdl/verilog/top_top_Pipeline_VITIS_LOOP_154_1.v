// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_top_Pipeline_VITIS_LOOP_154_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        xbarpipe_dout,
        xbarpipe_empty_n,
        xbarpipe_read,
        xbarIDRpipe_dout,
        xbarIDRpipe_empty_n,
        xbarIDRpipe_read,
        IDRpipe1_din,
        IDRpipe1_full_n,
        IDRpipe1_write,
        IDRpipe2_din,
        IDRpipe2_full_n,
        IDRpipe2_write,
        IDRpipe3_din,
        IDRpipe3_full_n,
        IDRpipe3_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] xbarpipe_dout;
input   xbarpipe_empty_n;
output   xbarpipe_read;
input  [51:0] xbarIDRpipe_dout;
input   xbarIDRpipe_empty_n;
output   xbarIDRpipe_read;
output  [51:0] IDRpipe1_din;
input   IDRpipe1_full_n;
output   IDRpipe1_write;
output  [51:0] IDRpipe2_din;
input   IDRpipe2_full_n;
output   IDRpipe2_write;
output  [51:0] IDRpipe3_din;
input   IDRpipe3_full_n;
output   IDRpipe3_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg xbarpipe_read;
reg xbarIDRpipe_read;
reg IDRpipe1_write;
reg IDRpipe2_write;
reg IDRpipe3_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] tmp_3_reg_131;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
wire   [0:0] and_ln180_fu_119_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    xbarIDRpipe_blk_n;
wire    ap_block_pp0_stage0;
wire   [0:0] grp_nbreadreq_fu_58_p3;
reg    IDRpipe1_blk_n;
reg   [2:0] ind_V_reg_142;
reg    xbarpipe_blk_n;
wire    ap_block_pp0_stage1;
reg    IDRpipe2_blk_n;
reg    IDRpipe3_blk_n;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_predicate_op37_write_state3;
reg    ap_predicate_op39_write_state3;
reg    ap_predicate_op41_write_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [51:0] xbarIDRpipe_read_reg_135;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] and_ln180_reg_146;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [31:0] cnt_fu_54;
wire   [31:0] cnt_8_fu_102_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln180_fu_113_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_done_pending_pp0;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln180_reg_146 <= and_ln180_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_58_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cnt_fu_54 <= cnt_8_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_3_reg_131 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ind_V_reg_142 <= xbarpipe_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_131 <= grp_nbreadreq_fu_58_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_58_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xbarIDRpipe_read_reg_135 <= xbarIDRpipe_dout;
    end
end

always @ (*) begin
    if (((ind_V_reg_142 == 3'd1) & (1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_131 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IDRpipe1_blk_n = IDRpipe1_full_n;
    end else begin
        IDRpipe1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op41_write_state3 == 1'b1))) begin
        IDRpipe1_write = 1'b1;
    end else begin
        IDRpipe1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ind_V_reg_142 == 3'd2) & (1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_131 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IDRpipe2_blk_n = IDRpipe2_full_n;
    end else begin
        IDRpipe2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op39_write_state3 == 1'b1))) begin
        IDRpipe2_write = 1'b1;
    end else begin
        IDRpipe2_write = 1'b0;
    end
end

always @ (*) begin
    if (((ind_V_reg_142 == 3'd3) & (1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_131 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IDRpipe3_blk_n = IDRpipe3_full_n;
    end else begin
        IDRpipe3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state3 == 1'b1))) begin
        IDRpipe3_write = 1'b1;
    end else begin
        IDRpipe3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'd1 == and_ln180_fu_119_p2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'd1 == and_ln180_reg_146) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((grp_nbreadreq_fu_58_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xbarIDRpipe_blk_n = xbarIDRpipe_empty_n;
    end else begin
        xbarIDRpipe_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((grp_nbreadreq_fu_58_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xbarIDRpipe_read = 1'b1;
    end else begin
        xbarIDRpipe_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (tmp_3_reg_131 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        xbarpipe_blk_n = xbarpipe_empty_n;
    end else begin
        xbarpipe_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_3_reg_131 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        xbarpipe_read = 1'b1;
    end else begin
        xbarpipe_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IDRpipe1_din = xbarIDRpipe_read_reg_135;

assign IDRpipe2_din = xbarIDRpipe_read_reg_135;

assign IDRpipe3_din = xbarIDRpipe_read_reg_135;

assign and_ln180_fu_119_p2 = (icmp_ln180_fu_113_p2 & grp_nbreadreq_fu_58_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == IDRpipe1_full_n) & (ap_predicate_op41_write_state3 == 1'b1)) | ((1'b0 == IDRpipe2_full_n) & (ap_predicate_op39_write_state3 == 1'b1)) | ((1'b0 == IDRpipe3_full_n) & (ap_predicate_op37_write_state3 == 1'b1)))) | ((grp_nbreadreq_fu_58_p3 == 1'd1) & (xbarIDRpipe_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == IDRpipe1_full_n) & (ap_predicate_op41_write_state3 == 1'b1)) | ((1'b0 == IDRpipe2_full_n) & (ap_predicate_op39_write_state3 == 1'b1)) | ((1'b0 == IDRpipe3_full_n) & (ap_predicate_op37_write_state3 == 1'b1)))) | ((grp_nbreadreq_fu_58_p3 == 1'd1) & (xbarIDRpipe_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == IDRpipe1_full_n) & (ap_predicate_op41_write_state3 == 1'b1)) | ((1'b0 == IDRpipe2_full_n) & (ap_predicate_op39_write_state3 == 1'b1)) | ((1'b0 == IDRpipe3_full_n) & (ap_predicate_op37_write_state3 == 1'b1)))) | ((grp_nbreadreq_fu_58_p3 == 1'd1) & (xbarIDRpipe_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((tmp_3_reg_131 == 1'd1) & (xbarpipe_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((tmp_3_reg_131 == 1'd1) & (xbarpipe_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((grp_nbreadreq_fu_58_p3 == 1'd1) & (xbarIDRpipe_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((tmp_3_reg_131 == 1'd1) & (xbarpipe_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((1'b0 == IDRpipe1_full_n) & (ap_predicate_op41_write_state3 == 1'b1)) | ((1'b0 == IDRpipe2_full_n) & (ap_predicate_op39_write_state3 == 1'b1)) | ((1'b0 == IDRpipe3_full_n) & (ap_predicate_op37_write_state3 == 1'b1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (xbarpipe_blk_n & xbarIDRpipe_blk_n & IDRpipe3_blk_n & IDRpipe2_blk_n & IDRpipe1_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op37_write_state3 = ((ind_V_reg_142 == 3'd3) & (tmp_3_reg_131 == 1'd1));
end

always @ (*) begin
    ap_predicate_op39_write_state3 = ((ind_V_reg_142 == 3'd2) & (tmp_3_reg_131 == 1'd1));
end

always @ (*) begin
    ap_predicate_op41_write_state3 = ((ind_V_reg_142 == 3'd1) & (tmp_3_reg_131 == 1'd1));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign cnt_8_fu_102_p2 = (cnt_fu_54 + 32'd1);

assign grp_nbreadreq_fu_58_p3 = xbarIDRpipe_empty_n;

assign icmp_ln180_fu_113_p2 = ((cnt_fu_54 == 32'd16) ? 1'b1 : 1'b0);

endmodule //top_top_Pipeline_VITIS_LOOP_154_1
