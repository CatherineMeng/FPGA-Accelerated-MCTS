-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_subT1_lev_stage_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    childindexpipe_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    childindexpipe_0_empty_n : IN STD_LOGIC;
    childindexpipe_0_read : OUT STD_LOGIC;
    childindexpipe_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    childindexpipe_1_full_n : IN STD_LOGIC;
    childindexpipe_1_write : OUT STD_LOGIC;
    lev_retpipe_0_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    lev_retpipe_0_empty_n : IN STD_LOGIC;
    lev_retpipe_0_read : OUT STD_LOGIC;
    lev_retpipe_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    lev_retpipe_1_full_n : IN STD_LOGIC;
    lev_retpipe_1_write : OUT STD_LOGIC;
    IDRpipes_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    IDRpipes_0_empty_n : IN STD_LOGIC;
    IDRpipes_0_read : OUT STD_LOGIC;
    IDRpipes_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    IDRpipes_1_full_n : IN STD_LOGIC;
    IDRpipes_1_write : OUT STD_LOGIC;
    memoiz_array_par_ind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    memoiz_array_par_ind_ce0 : OUT STD_LOGIC;
    memoiz_array_par_ind_we0 : OUT STD_LOGIC;
    memoiz_array_par_ind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    memoiz_array_par_ind_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    memoiz_array_child_ind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    memoiz_array_child_ind_ce0 : OUT STD_LOGIC;
    memoiz_array_child_ind_we0 : OUT STD_LOGIC;
    memoiz_array_child_ind_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    memoiz_array_child_ind_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of top_subT1_lev_stage_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lev3_numc_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lev3_numc_V_ce0 : STD_LOGIC;
    signal lev3_numc_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal lev3_ucta_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal lev3_ucta_V_ce0 : STD_LOGIC;
    signal lev3_ucta_V_we0 : STD_LOGIC;
    signal lev3_ucta_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal childindexpipe_0_blk_n : STD_LOGIC;
    signal childindexpipe_1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal lev_retpipe_0_blk_n : STD_LOGIC;
    signal lev_retpipe_1_blk_n : STD_LOGIC;
    signal IDRpipes_0_blk_n : STD_LOGIC;
    signal IDRpipes_1_blk_n : STD_LOGIC;
    signal childindexpipe_0_read_reg_347 : STD_LOGIC_VECTOR (63 downto 0);
    signal pipeobj_depth_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pipeobj_depth_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal pipeobj_ind_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_signal_V_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal IDRpipes_0_read_reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal IDR_wind_fu_213_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal IDR_wind_reg_374 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_new_rewd_V_reg_379 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal parnode_numc_V_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal memoiz_array_par_ind_addr_reg_395 : STD_LOGIC_VECTOR (4 downto 0);
    signal memoiz_array_child_ind_addr_reg_400 : STD_LOGIC_VECTOR (4 downto 0);
    signal mobj_child_ind_reg_405 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln712_fu_257_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln712_reg_410 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln395_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln395_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln395_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln395_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal lev3_ucta_V_addr_reg_429 : STD_LOGIC_VECTOR (4 downto 0);
    signal lev3_ucta_V_load_reg_434 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln712_fu_287_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln712_reg_439 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal newind_7_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal newind_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal newind_9_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln379_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln390_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln395_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_1_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state10 : BOOLEAN;
    signal trunc_ln712_1_fu_245_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_cast_fu_249_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln712_fu_241_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln712_fu_274_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln712_1_fu_277_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_190_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal and_ln3_fu_291_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln413_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln413_fu_304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln435_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln435_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_subT1_lev_stage_2_lev3_numc_V_RAM_1P_URAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component top_subT1_lev_stage_2_lev3_ucta_V_RAM_1P_URAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    lev3_numc_V_U : component top_subT1_lev_stage_2_lev3_numc_V_RAM_1P_URAM_1R1W
    generic map (
        DataWidth => 1,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lev3_numc_V_address0,
        ce0 => lev3_numc_V_ce0,
        q0 => lev3_numc_V_q0);

    lev3_ucta_V_U : component top_subT1_lev_stage_2_lev3_ucta_V_RAM_1P_URAM_1R1W
    generic map (
        DataWidth => 20,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lev3_ucta_V_address0,
        ce0 => lev3_ucta_V_ce0,
        we0 => lev3_ucta_V_we0,
        d0 => add_ln712_reg_439,
        q0 => lev3_ucta_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    newind_9_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                newind_9_reg_181 <= newind_fu_333_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                newind_9_reg_181 <= newind_7_fu_311_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                IDR_wind_reg_374 <= IDR_wind_fu_213_p1;
                IDRpipes_0_read_reg_369 <= IDRpipes_0_dout;
                childindexpipe_0_read_reg_347 <= childindexpipe_0_dout;
                pipeobj_depth_reg_352 <= pipeobj_depth_fu_199_p1;
                pipeobj_ind_reg_357 <= childindexpipe_0_dout(63 downto 32);
                ret_signal_V_reg_365 <= lev_retpipe_0_dout;
                tmp_new_rewd_V_reg_379 <= IDRpipes_0_dout(51 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln712_reg_439 <= add_ln712_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                and_ln395_reg_425 <= and_ln395_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln395_reg_420 <= icmp_ln395_fu_263_p2;
                mobj_child_ind_reg_405 <= memoiz_array_child_ind_q0;
                sub_ln712_reg_410 <= sub_ln712_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln395_fu_269_p2))) then
                lev3_ucta_V_addr_reg_429 <= zext_ln712_1_fu_282_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                lev3_ucta_V_load_reg_434 <= lev3_ucta_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ret_signal_V_reg_365 = ap_const_lv1_0))) then
                memoiz_array_child_ind_addr_reg_400 <= zext_ln390_fu_231_p1(5 - 1 downto 0);
                memoiz_array_par_ind_addr_reg_395 <= zext_ln390_fu_231_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                parnode_numc_V_reg_389 <= lev3_numc_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, childindexpipe_0_empty_n, childindexpipe_1_full_n, lev_retpipe_0_empty_n, lev_retpipe_1_full_n, IDRpipes_0_empty_n, IDRpipes_1_full_n, ap_CS_fsm_state10, ret_signal_V_reg_365, ap_CS_fsm_state3, and_ln395_fu_269_p2, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((lev_retpipe_0_empty_n = ap_const_logic_0) or (childindexpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ret_signal_V_reg_365 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln395_fu_269_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (childindexpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    IDR_wind_fu_213_p1 <= IDRpipes_0_dout(5 - 1 downto 0);

    IDRpipes_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, IDRpipes_0_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            IDRpipes_0_blk_n <= IDRpipes_0_empty_n;
        else 
            IDRpipes_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IDRpipes_0_read_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if ((not(((lev_retpipe_0_empty_n = ap_const_logic_0) or (childindexpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IDRpipes_0_read <= ap_const_logic_1;
        else 
            IDRpipes_0_read <= ap_const_logic_0;
        end if; 
    end process;


    IDRpipes_1_blk_n_assign_proc : process(IDRpipes_1_full_n, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            IDRpipes_1_blk_n <= IDRpipes_1_full_n;
        else 
            IDRpipes_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IDRpipes_1_din <= IDRpipes_0_read_reg_369;

    IDRpipes_1_write_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state10)
    begin
        if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (childindexpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            IDRpipes_1_write <= ap_const_logic_1;
        else 
            IDRpipes_1_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln712_1_fu_277_p2 <= std_logic_vector(unsigned(sub_ln712_reg_410) + unsigned(zext_ln712_fu_274_p1));
    add_ln712_fu_287_p2 <= std_logic_vector(unsigned(lev3_ucta_V_load_reg_434) + unsigned(tmp_new_rewd_V_reg_379));
    and_ln395_fu_269_p2 <= (lev3_numc_V_q0 and icmp_ln395_reg_420);
    and_ln3_fu_291_p3 <= (grp_fu_190_p4 & ap_const_lv2_0);
    and_ln_fu_317_p3 <= (grp_fu_190_p4 & ap_const_lv2_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n)
    begin
        if (((lev_retpipe_1_full_n = ap_const_logic_0) or (childindexpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n))) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if (((lev_retpipe_0_empty_n = ap_const_logic_0) or (childindexpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
                ap_block_state1 <= ((lev_retpipe_0_empty_n = ap_const_logic_0) or (childindexpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state10_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n)
    begin
                ap_block_state10 <= ((lev_retpipe_1_full_n = ap_const_logic_0) or (childindexpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or (not(((lev_retpipe_1_full_n = ap_const_logic_0) or (childindexpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (lev_retpipe_1_blk_n and lev_retpipe_0_blk_n and childindexpipe_1_blk_n and childindexpipe_0_blk_n and IDRpipes_1_blk_n and IDRpipes_0_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);

    ap_ready_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state10)
    begin
        if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (childindexpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    childindexpipe_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            childindexpipe_0_blk_n <= childindexpipe_0_empty_n;
        else 
            childindexpipe_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    childindexpipe_0_read_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if ((not(((lev_retpipe_0_empty_n = ap_const_logic_0) or (childindexpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            childindexpipe_0_read <= ap_const_logic_1;
        else 
            childindexpipe_0_read <= ap_const_logic_0;
        end if; 
    end process;


    childindexpipe_1_blk_n_assign_proc : process(childindexpipe_1_full_n, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            childindexpipe_1_blk_n <= childindexpipe_1_full_n;
        else 
            childindexpipe_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    childindexpipe_1_din <= (newind_9_reg_181 & pipeobj_depth_reg_352);

    childindexpipe_1_write_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state10)
    begin
        if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (childindexpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            childindexpipe_1_write <= ap_const_logic_1;
        else 
            childindexpipe_1_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_190_p4 <= childindexpipe_0_read_reg_347(61 downto 32);
    icmp_ln395_fu_263_p2 <= "1" when (signed(memoiz_array_par_ind_q0) < signed(ap_const_lv32_3)) else "0";

    lev3_numc_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln379_fu_227_p1, zext_ln395_fu_236_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            lev3_numc_V_address0 <= zext_ln395_fu_236_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lev3_numc_V_address0 <= zext_ln379_fu_227_p1(4 - 1 downto 0);
        else 
            lev3_numc_V_address0 <= "XXXX";
        end if; 
    end process;


    lev3_numc_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            lev3_numc_V_ce0 <= ap_const_logic_1;
        else 
            lev3_numc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lev3_ucta_V_address0_assign_proc : process(ap_CS_fsm_state5, lev3_ucta_V_addr_reg_429, ap_CS_fsm_state8, zext_ln712_1_fu_282_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            lev3_ucta_V_address0 <= lev3_ucta_V_addr_reg_429;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            lev3_ucta_V_address0 <= zext_ln712_1_fu_282_p1(5 - 1 downto 0);
        else 
            lev3_ucta_V_address0 <= "XXXXX";
        end if; 
    end process;


    lev3_ucta_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            lev3_ucta_V_ce0 <= ap_const_logic_1;
        else 
            lev3_ucta_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lev3_ucta_V_we0_assign_proc : process(and_ln395_reg_425, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = and_ln395_reg_425))) then 
            lev3_ucta_V_we0 <= ap_const_logic_1;
        else 
            lev3_ucta_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lev_retpipe_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, lev_retpipe_0_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            lev_retpipe_0_blk_n <= lev_retpipe_0_empty_n;
        else 
            lev_retpipe_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    lev_retpipe_0_read_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if ((not(((lev_retpipe_0_empty_n = ap_const_logic_0) or (childindexpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            lev_retpipe_0_read <= ap_const_logic_1;
        else 
            lev_retpipe_0_read <= ap_const_logic_0;
        end if; 
    end process;


    lev_retpipe_1_blk_n_assign_proc : process(lev_retpipe_1_full_n, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            lev_retpipe_1_blk_n <= lev_retpipe_1_full_n;
        else 
            lev_retpipe_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    lev_retpipe_1_din <= ap_const_lv1_1;

    lev_retpipe_1_write_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state10)
    begin
        if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (childindexpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            lev_retpipe_1_write <= ap_const_logic_1;
        else 
            lev_retpipe_1_write <= ap_const_logic_0;
        end if; 
    end process;


    memoiz_array_child_ind_address0_assign_proc : process(ap_CS_fsm_state3, memoiz_array_child_ind_addr_reg_400, ap_CS_fsm_state8, zext_ln390_fu_231_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            memoiz_array_child_ind_address0 <= memoiz_array_child_ind_addr_reg_400;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            memoiz_array_child_ind_address0 <= zext_ln390_fu_231_p1(5 - 1 downto 0);
        else 
            memoiz_array_child_ind_address0 <= "XXXXX";
        end if; 
    end process;


    memoiz_array_child_ind_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            memoiz_array_child_ind_ce0 <= ap_const_logic_1;
        else 
            memoiz_array_child_ind_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    memoiz_array_child_ind_d0 <= ap_const_lv1_0;

    memoiz_array_child_ind_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            memoiz_array_child_ind_we0 <= ap_const_logic_1;
        else 
            memoiz_array_child_ind_we0 <= ap_const_logic_0;
        end if; 
    end process;


    memoiz_array_par_ind_address0_assign_proc : process(ap_CS_fsm_state3, memoiz_array_par_ind_addr_reg_395, ap_CS_fsm_state8, zext_ln390_fu_231_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            memoiz_array_par_ind_address0 <= memoiz_array_par_ind_addr_reg_395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            memoiz_array_par_ind_address0 <= zext_ln390_fu_231_p1(5 - 1 downto 0);
        else 
            memoiz_array_par_ind_address0 <= "XXXXX";
        end if; 
    end process;


    memoiz_array_par_ind_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            memoiz_array_par_ind_ce0 <= ap_const_logic_1;
        else 
            memoiz_array_par_ind_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    memoiz_array_par_ind_d0 <= pipeobj_ind_reg_357;

    memoiz_array_par_ind_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            memoiz_array_par_ind_we0 <= ap_const_logic_1;
        else 
            memoiz_array_par_ind_we0 <= ap_const_logic_0;
        end if; 
    end process;

    newind_7_fu_311_p2 <= std_logic_vector(unsigned(sub_ln413_fu_299_p2) + unsigned(select_ln413_fu_304_p3));
    newind_fu_333_p2 <= std_logic_vector(unsigned(sub_ln435_fu_325_p2) + unsigned(zext_ln435_fu_330_p1));
    pipeobj_depth_fu_199_p1 <= childindexpipe_0_dout(32 - 1 downto 0);
    select_ln413_fu_304_p3 <= 
        ap_const_lv32_2 when (parnode_numc_V_reg_389(0) = '1') else 
        ap_const_lv32_1;
    sub_ln413_fu_299_p2 <= std_logic_vector(unsigned(and_ln3_fu_291_p3) - unsigned(pipeobj_ind_reg_357));
    sub_ln435_fu_325_p2 <= std_logic_vector(unsigned(and_ln_fu_317_p3) - unsigned(pipeobj_ind_reg_357));
    sub_ln712_fu_257_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_249_p3) - unsigned(trunc_ln712_fu_241_p1));
    tmp_7_cast_fu_249_p3 <= (trunc_ln712_1_fu_245_p1 & ap_const_lv2_0);
    trunc_ln712_1_fu_245_p1 <= memoiz_array_par_ind_q0(3 - 1 downto 0);
    trunc_ln712_fu_241_p1 <= memoiz_array_par_ind_q0(5 - 1 downto 0);
    zext_ln379_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pipeobj_ind_reg_357),64));
    zext_ln390_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IDR_wind_reg_374),64));
    zext_ln395_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(memoiz_array_par_ind_q0),64));
    zext_ln435_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(parnode_numc_V_reg_389),32));
    zext_ln712_1_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_1_fu_277_p2),64));
    zext_ln712_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mobj_child_ind_reg_405),5));
end behav;
