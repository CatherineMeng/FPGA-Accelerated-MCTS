-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_subT1_lev_stage_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    childindexpipe_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    childindexpipe_0_empty_n : IN STD_LOGIC;
    childindexpipe_0_read : OUT STD_LOGIC;
    childindexpipe_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    childindexpipe_1_full_n : IN STD_LOGIC;
    childindexpipe_1_write : OUT STD_LOGIC;
    lev_retpipe_0_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    lev_retpipe_0_empty_n : IN STD_LOGIC;
    lev_retpipe_0_read : OUT STD_LOGIC;
    lev_retpipe_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    lev_retpipe_1_full_n : IN STD_LOGIC;
    lev_retpipe_1_write : OUT STD_LOGIC;
    IDRpipes_0_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    IDRpipes_0_empty_n : IN STD_LOGIC;
    IDRpipes_0_read : OUT STD_LOGIC;
    IDRpipes_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    IDRpipes_1_full_n : IN STD_LOGIC;
    IDRpipes_1_write : OUT STD_LOGIC;
    memoiz_array_par_ind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    memoiz_array_par_ind_ce0 : OUT STD_LOGIC;
    memoiz_array_par_ind_we0 : OUT STD_LOGIC;
    memoiz_array_par_ind_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    memoiz_array_child_ind_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    memoiz_array_child_ind_ce0 : OUT STD_LOGIC;
    memoiz_array_child_ind_we0 : OUT STD_LOGIC;
    memoiz_array_child_ind_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of top_subT1_lev_stage_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal childindexpipe_0_blk_n : STD_LOGIC;
    signal childindexpipe_1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lev_retpipe_0_blk_n : STD_LOGIC;
    signal lev_retpipe_1_blk_n : STD_LOGIC;
    signal IDRpipes_0_blk_n : STD_LOGIC;
    signal IDRpipes_1_blk_n : STD_LOGIC;
    signal pipeobj_depth_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pipeobj_depth_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_signal_V_read_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_signal_V_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal IDRpipes_0_read_reg_232 : STD_LOGIC_VECTOR (63 downto 0);
    signal newind_4_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newind_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newind_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_newind_6_phi_fu_140_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal newind_6_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal zext_ln390_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal pipeobj_ind_fu_160_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal IDR_wind_fu_171_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_146_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal and_ln2_fu_181_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln413_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln_fu_201_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    newind_6_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n) or (childindexpipe_1_full_n = ap_const_logic_0))) and (ret_signal_V_reg_228 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                newind_6_reg_137 <= newind_reg_242;
            elsif ((not(((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) and (ret_signal_V_read_fu_76_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                newind_6_reg_137 <= newind_4_fu_195_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                IDRpipes_0_read_reg_232 <= IDRpipes_0_dout;
                pipeobj_depth_reg_223 <= pipeobj_depth_fu_156_p1;
                ret_signal_V_reg_228 <= lev_retpipe_0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ret_signal_V_read_fu_76_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                newind_reg_242 <= newind_fu_209_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, childindexpipe_0_empty_n, childindexpipe_1_full_n, lev_retpipe_0_empty_n, lev_retpipe_1_full_n, IDRpipes_0_empty_n, IDRpipes_1_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n) or (childindexpipe_1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    IDR_wind_fu_171_p1 <= IDRpipes_0_dout(5 - 1 downto 0);

    IDRpipes_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, IDRpipes_0_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IDRpipes_0_blk_n <= IDRpipes_0_empty_n;
        else 
            IDRpipes_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IDRpipes_0_read_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IDRpipes_0_read <= ap_const_logic_1;
        else 
            IDRpipes_0_read <= ap_const_logic_0;
        end if; 
    end process;


    IDRpipes_1_blk_n_assign_proc : process(IDRpipes_1_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IDRpipes_1_blk_n <= IDRpipes_1_full_n;
        else 
            IDRpipes_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    IDRpipes_1_din <= IDRpipes_0_read_reg_232;

    IDRpipes_1_write_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n) or (childindexpipe_1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IDRpipes_1_write <= ap_const_logic_1;
        else 
            IDRpipes_1_write <= ap_const_logic_0;
        end if; 
    end process;

    and_ln2_fu_181_p3 <= (grp_fu_146_p4 & ap_const_lv2_0);
    and_ln_fu_201_p3 <= (grp_fu_146_p4 & ap_const_lv2_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if (((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n)
    begin
        if (((lev_retpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n) or (childindexpipe_1_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n)
    begin
                ap_block_state2 <= ((lev_retpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n) or (childindexpipe_1_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((lev_retpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n) or (childindexpipe_1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (lev_retpipe_1_blk_n and lev_retpipe_0_blk_n and childindexpipe_1_blk_n and childindexpipe_0_blk_n and IDRpipes_1_blk_n and IDRpipes_0_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);

    ap_phi_mux_newind_6_phi_fu_140_p4_assign_proc : process(ap_CS_fsm_state2, ret_signal_V_reg_228, newind_reg_242, newind_6_reg_137)
    begin
        if (((ret_signal_V_reg_228 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_newind_6_phi_fu_140_p4 <= newind_reg_242;
        else 
            ap_phi_mux_newind_6_phi_fu_140_p4 <= newind_6_reg_137;
        end if; 
    end process;


    ap_ready_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n) or (childindexpipe_1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    childindexpipe_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            childindexpipe_0_blk_n <= childindexpipe_0_empty_n;
        else 
            childindexpipe_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    childindexpipe_0_read_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            childindexpipe_0_read <= ap_const_logic_1;
        else 
            childindexpipe_0_read <= ap_const_logic_0;
        end if; 
    end process;


    childindexpipe_1_blk_n_assign_proc : process(childindexpipe_1_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            childindexpipe_1_blk_n <= childindexpipe_1_full_n;
        else 
            childindexpipe_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    childindexpipe_1_din <= (ap_phi_mux_newind_6_phi_fu_140_p4 & pipeobj_depth_reg_223);

    childindexpipe_1_write_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n) or (childindexpipe_1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            childindexpipe_1_write <= ap_const_logic_1;
        else 
            childindexpipe_1_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_146_p4 <= childindexpipe_0_dout(61 downto 32);

    lev_retpipe_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, lev_retpipe_0_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            lev_retpipe_0_blk_n <= lev_retpipe_0_empty_n;
        else 
            lev_retpipe_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    lev_retpipe_0_read_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            lev_retpipe_0_read <= ap_const_logic_1;
        else 
            lev_retpipe_0_read <= ap_const_logic_0;
        end if; 
    end process;


    lev_retpipe_1_blk_n_assign_proc : process(lev_retpipe_1_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lev_retpipe_1_blk_n <= lev_retpipe_1_full_n;
        else 
            lev_retpipe_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    lev_retpipe_1_din <= ap_const_lv1_1;

    lev_retpipe_1_write_assign_proc : process(childindexpipe_1_full_n, lev_retpipe_1_full_n, IDRpipes_1_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((lev_retpipe_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_1_full_n) or (childindexpipe_1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            lev_retpipe_1_write <= ap_const_logic_1;
        else 
            lev_retpipe_1_write <= ap_const_logic_0;
        end if; 
    end process;

    memoiz_array_child_ind_address0 <= zext_ln390_fu_175_p1(5 - 1 downto 0);

    memoiz_array_child_ind_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            memoiz_array_child_ind_ce0 <= ap_const_logic_1;
        else 
            memoiz_array_child_ind_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    memoiz_array_child_ind_d0 <= ap_const_lv1_0;

    memoiz_array_child_ind_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n, ret_signal_V_read_fu_76_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) and (ret_signal_V_read_fu_76_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            memoiz_array_child_ind_we0 <= ap_const_logic_1;
        else 
            memoiz_array_child_ind_we0 <= ap_const_logic_0;
        end if; 
    end process;

    memoiz_array_par_ind_address0 <= zext_ln390_fu_175_p1(5 - 1 downto 0);

    memoiz_array_par_ind_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            memoiz_array_par_ind_ce0 <= ap_const_logic_1;
        else 
            memoiz_array_par_ind_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    memoiz_array_par_ind_d0 <= childindexpipe_0_dout(63 downto 32);

    memoiz_array_par_ind_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, childindexpipe_0_empty_n, lev_retpipe_0_empty_n, IDRpipes_0_empty_n, ret_signal_V_read_fu_76_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (lev_retpipe_0_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IDRpipes_0_empty_n) or (childindexpipe_0_empty_n = ap_const_logic_0))) and (ret_signal_V_read_fu_76_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            memoiz_array_par_ind_we0 <= ap_const_logic_1;
        else 
            memoiz_array_par_ind_we0 <= ap_const_logic_0;
        end if; 
    end process;

    newind_4_fu_195_p2 <= std_logic_vector(unsigned(sub_ln413_fu_189_p2) + unsigned(ap_const_lv32_1));
    newind_fu_209_p2 <= std_logic_vector(unsigned(and_ln_fu_201_p3) - unsigned(pipeobj_ind_fu_160_p4));
    pipeobj_depth_fu_156_p1 <= childindexpipe_0_dout(32 - 1 downto 0);
    pipeobj_ind_fu_160_p4 <= childindexpipe_0_dout(63 downto 32);
    ret_signal_V_read_fu_76_p2 <= lev_retpipe_0_dout;
    sub_ln413_fu_189_p2 <= std_logic_vector(unsigned(and_ln2_fu_181_p3) - unsigned(pipeobj_ind_fu_160_p4));
    zext_ln390_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IDR_wind_fu_171_p1),64));
end behav;
